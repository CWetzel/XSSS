xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
###############################################################################################
# Uncertainty vs. M  and Lratio by LH Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm_LH_4.png", w = 6, h = 6)
par(mfrow = c(2,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[rockfish.wt,"m"],weighted.sigma[xx,rockfish.wt] * convert, type = 'p', col = blue, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("a) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Rockfish")
plot( wt.parameters[roundfish.wt,"m"], weighted.sigma[xx,roundfish.wt] * convert, type = 'p', col = green, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("b) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Roundfish")
plot(wt.parameters[rockfish.wt,"lratio"], weighted.sigma[xx,rockfish.wt] * convert,  type = 'p', col = blue, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("c) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
plot(wt.parameters[roundfish.wt,"lratio"], weighted.sigma[xx,roundfish.wt] * convert,  type = 'p', col = green, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("d) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 2, expression(sigma), outer = T, line = 2)
dev.off()
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"] + wt.parameters[rockfish.wt,"mat.slope"]+wt.parameters[rockfish.wt,"mat.size"])
lm
summary(lm0)
summary(lm)
pval = anova(lm)
pval
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]+wt.parameters[rockfish.wt,"mat.size"])
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]+wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]*wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = glm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]*wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = glm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
summary(glm())
summary(glm
)
glm()
summary(lm)
all = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+
wt.parameters[,"mat.slope"]+
wt.parameters[,"steep"]+
wt.parameters[,"k"])
summary(all)
plot(all)
all.rock = glm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"])
plot(m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.m.int.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.int.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~log(wt.parameters[rockfish.wt,"lratio"]))
plot(lratio.rock)
lratio.rock = lm(log(weighted.sigma[xx,rockfish.wt])~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
summary(lratio.rock)
wt.pch.vec = c(rep(16,3), 17, 15, rep(16,3), 18, rep(17,2), 18, 17, rep(16, 4))
# Uncertainty vs. Maturity, Length, Ratio w/ Linear model Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
###############################################################################################
# Uncertainty vs. M  and Lratio by LH Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm_LH_4.png", w = 6, h = 6)
par(mfrow = c(2,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[rockfish.wt,"m"],weighted.sigma[xx,rockfish.wt] * convert, type = 'p', col = blue, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("a) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Rockfish")
plot( wt.parameters[roundfish.wt,"m"], weighted.sigma[xx,roundfish.wt] * convert, type = 'p', col = green, pch = 17,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("b) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Roundfish")
plot(wt.parameters[rockfish.wt,"lratio"], weighted.sigma[xx,rockfish.wt] * convert,  type = 'p', col = blue, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("c) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
plot(wt.parameters[roundfish.wt,"lratio"], weighted.sigma[xx,roundfish.wt] * convert,  type = 'p', col = green, pch = 17,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("d) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 2, expression(sigma), outer = T, line = 2)
dev.off()
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(1,1), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
wt.col.vec = c(rep(blue,3), green, 'darkgrey', rep(blue,3), red, rep(green,2), red, green, rep(blue, 4))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 2,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
wd = "C:/Users/Chantel.Wetzel/Documents/GitHub/XSSS"
setwd(wd)
devtools::use_vignette("xsss_introduction")
devtools::use_vignette("xsss_introduction")
tab = cbind( c(1, -1, 1, 1, 0, "Fishery"),
c(3, 1007, 1, 1, 0, "Survey" ),
c(3, 1001, 1, 1, 0, "Depletion_Survey"))
tab
tab = rbind( c(1, -1, 1, 1, 0, "Fishery"),
c(3, 1007, 1, 1, 0, "Survey" ),
c(3, 1001, 1, 1, 0, "Depletion_Survey"))
tab
library(xtable)
tab = rbind( c(1, -1, 1, 1, 0, "Fishery"),
c(3, 1007, 1, 1, 0, "Survey" ),
c(3, 1001, 1, 1, 0, "Depletion_Survey"))
rownames(tab) = c("Fleet_type", "Timing", "Area", "Units", "Catch_mult", "Fleet_name")
table = xtable(tab)
align(table) = c('l',
'>{\\center}p{1in}',
'>{\\center}p{1in}',
'>{\\center}p{1in}',
'>{\\center}p{1in}',
'>{\\center}p{1in}',
'>{\\center}p{1in}')
table
print(table,
include.rownames=FALSE,
caption.placement='top',
comment = FALSE,
sanitize.text.function = function(x){x})
tab
tab = rbind( c(1, -1, 1, 1, 0, "Fishery"),
c(3, 1007, 1, 1, 0, "Survey" ),
c(3, 1001, 1, 1, 0, "Depletion_Survey"))
rownames(tab) = c("Fleet_type", "Timing", "Area", "Units", "Catch_mult", "Fleet_name")
tab
colnames(tab) = c("Fleet_type", "Timing", "Area", "Units", "Catch_mult", "Fleet_name")
tab
install.packages("kableExrtra")
devtools::install_github("haozhu233/kableExtra")
tab = rbind( c(1, 1, 0, 1, "#Fishery"),
c(2, 1, 1, "#Survey" ),
c(3, 34, 1, "#Depletion_Survey"))
c(1, 1, 0, 1, "#Fishery")
c(2, 1, 1, "#Survey" )
c(3, 34, 1, "#Depletion_Survey")
tab = rbind( c(1, 1, 0, 1, "#Fishery"),
c(2, 1, 1, "#Survey"),
c(3, 34, 1, "#Depletion_Survey"))
tab
tab = rbind( c(1, 1,  0, 1, "#Fishery"),
c(2, 1,  0, 1, "#Survey"),
c(3, 34, 0, 1, "#Depletion_Survey"))
colnames(tab) = c("Fleet_number", "Unit", "Error_Type", "Extra_SD_Reporting",  "Fleet_name")
tab
tab = rbind( c(1, 1,  0, 1, "#Fishery"),
c(2, 1,  0, 1, "#Survey"),
c(3, 34, 0, 1, "#Depletion_Survey"))
colnames(tab) = c("Fleet_number", "Unit", "Error_Type", "Extra_SD_Reporting",  "Fleet_name")
tab
tab = rbind( c(1, 1,  0, 1),#, "#Fishery"),
c(2, 1,  0, 1),#, "#Survey"),
c(3, 34, 0, 1))#, "#Depletion_Survey"))
#colnames(tab) = c("Fleet_number", "Unit", "Error_Type", "Extra_SD_Reporting")#,  "Fleet_name")
tab
tab = rbind( c(1, -1, 1, 1, 0, "Fishery"),
c(3, 1007, 1, 1, 0, "Survey" ),
c(3, 1001, 1, 1, 0, "Depletion_Survey"))
colnames(tab) = c("Fleet_type", "Timing", "Area", "Units", "Catch_mult", "Fleet_name")
tab
setDF(tab)
tab = as.data.frame( c(1, -1, 1, 1, 0, "Fishery"),
c(3, 1007, 1, 1, 0, "Survey" ),
c(3, 1001, 1, 1, 0, "Depletion_Survey"))
tab = rbind( c(1, -1, 1, 1, 0, "Fishery"),
c(3, 1007, 1, 1, 0, "Survey" ),
c(3, 1001, 1, 1, 0, "Depletion_Survey"))
tab = as.data.frame(tab)
tab
colnames(tab) = c("Fleet_type", "Timing", "Area", "Units", "Catch_mult", "Fleet_name")
tab
tab = rbind( c(1918, 1, 3, 1, 0.01, "# Initial Depletion"),
c(2000, 1, 3, 0.40, 0.01, "# Final Depletion"))
colnames(tab) = c("Year", "Month", "Fleet", "Observation", "Standard_Error", "Fleet_name")
table = tab
tab
tab = rbind( c(2, 1, 0, 0, 0, 1, "# Survey"),
c(3, 1, 2, 0, 0, 1, "# Depletion Survey"))
colnames(tab) = c("Fleet", "Link", "Link_info", "Extra_SE", "Bias_adj", "Float", "Fleet_name")
table = tab
tab
